const SPOTIFY_AUTH_URL = "https://accounts.spotify.com/authorize?client_id=c65ee65876f34e368b95a9b12edd04a2&response_type=token&redirect_uri=https://SpotifyDiscogsAPIProject--brian-albert.repl.co&scope=user-read-recently-played&state=454";

const SPOTIFY_MOST_RECENT = "https://api.spotify.com/v1/me/player/recently-played";

const DISCOGS_VINYL_FORMAT = "https://api.discogs.com/database/search";

//const DISCOGS_  = "https://api.discogs.com/master/{master_id}"

/* Not sure if I will actually need this info since 
 the user is searching Discogs for an album and doesn't need
 to be logged in to a Discogs account:
Consumer Key	ScTqVUrBwlFeYEBOJJyI
Consumer Secret	WkuoOwfJrRtlBvGSivwobXtMXwvttKgh
Request Token URL	https://api.discogs.com/oauth/request_token
Authorize URL	https://www.discogs.com/oauth/authorize
Access Token URL	https://api.discogs.com/oauth/access_token 
*/


//Use OAuth in order to get user's recent play history.
function spotifyAuthLogin() {
  location.href = SPOTIFY_AUTH_URL; 
  // not an ajax request; just redirecting user.
} 

//Parse user's access token from the url
function getUserAccessToken() {

    // Get the entire url, that includes the undesired "#", the host (domain) and the parameters (where the useful information lies (the access token)
    let originalUrl = location.href;

    // replace the # with an question mark
    originalUrl = originalUrl.replace("#", "?");

    // split the url in two, the part before the question mark (the domain) and after (the parameters)
    let urlParts = originalUrl.split("?");

    // separate the parameters
    let rawQueryParameters = urlParts[1];
   
    // instantiate the parameters object with the raw parameters
    const params = new URLSearchParams(rawQueryParameters);

    // Finally! Extract the desired query parameter: "access_token"
    const token = params.get("access_token");

    if (token) {
        console.log('token was found', token);
        localStorage.setItem('token', token);
        getMostRecentlyPlayed();
    }
    else {
        console.log('token was not found')
    } 

    // When the code is executed after the redirect from the Spotify API, the constant "token" will contain the token
    // Otherwise the constant token will be either undefined or null!
}

/*Saves user's access token to local storage and makes call for
the user's recent play history.*/ 
function getMostRecentlyPlayed() {
  const token = localStorage.getItem("token");

  return fetch(SPOTIFY_MOST_RECENT, {
    headers: {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`
    }
  }).then(res => {
    return res.json();
  }).then(response => {
    console.log("response is", response);
    displayMostRecentlyPlayed(response);
  }).catch(error => {
    console.log("could not get response", error);
  });
}

//Formats Spotify data in HTML
function renderMostRecentlyPlayed(result) {
  console.log(result);
  const searchTerm = `${result.track.artists[0].name} ${result.track.album.name}`;
  searchDiscogsDatabase(result.track.album.name, result.track.artists[0].name, result.track.id, displayDiscogsSearchResult);

  return `
    <div>
          <div id="track-list">
          <img class="js-thumbnail" src="${result.track.album.images[1].url}" alt="thumbnail of album cover">
          <p>Track: <span class="js-track">${result.track.name}</span></p>
          <p>Artist Name: <span class="js-artist-name">${result.track.artists[0].name}</span></p>
          <p>Album: <span class="js-album-name">${result.track.album.name}</span></p>
          <p id="discogs-info-${result.track.id}"></p>
          </div>
    </div>
  `
}
// insert on line 93: <p id='discogs-info-1'></p>
// $("#discogs-info-1").text(information from the discogs api);
// insert this?: <p id='discogs-info-1'>${results[0].uri}</p>


//Renders Spotify data in the DOM
function displayMostRecentlyPlayed(data) {
  console.log(data);
  const results = data.items.map((item, index) => renderMostRecentlyPlayed(item));
  $('.js-spotify-results').html(results);
}



//Searches Discogs database
function searchDiscogsDatabase(searchTerm, artist, id, callback) {
  const KEY = 'ScTqVUrBwlFeYEBOJJyI';
  const SECRET = 'WkuoOwfJrRtlBvGSivwobXtMXwvttKgh';
  const settings = {
    url: DISCOGS_VINYL_FORMAT,
    data: {
      release_title: searchTerm,
      artist: artist,
      key: KEY,
      secret: SECRET,
      type: 'master',
      format: 'vinyl'
    },
    dataType: 'json',
    type: 'GET',
    success: function(data) {
      displayDiscogsSearchResult(data, id);
    }
  };
  $.ajax(settings);
}

//Renders Discogs data in the DOM
function displayDiscogsSearchResult(data, id) {
  console.log('Here is the vinyl data', data, id);
  let link = 'Sorry, we couldn\'t find that album on vinyl!';
  if (data.results.length) {
    console.log('test');
    let result = data.results[0];
    if (result.uri) {
    link = `<a href="https://www.discogs.com${result.uri}" target="_blank">Buy it online here</a>`;
    }
  }
  
  $(`#discogs-info-${id}`).html(link);
}


//Function to make login button get the whole thing started:
function registerEvents() {
  $("#login-button").click(spotifyAuthLogin);
  getUserAccessToken();
}


$(registerEvents);




//discogs master release endpoint:
// /masters/{master_id}/versions{?page,per_page}  and include format: vinyl